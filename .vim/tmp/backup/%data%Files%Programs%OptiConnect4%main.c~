#include <stdio.h>
#include <stdlib.h>

#define HEIGHT 6
#define WIDTH 7
#define BITLENGTH WIDTH*(HEIGHT+1)

const unsigned long BOTTOM = 4432676798593;


typedef struct {
	unsigned long mask : BITLENGTH;
	unsigned long player : BITLENGTH;
}Position;

Position createBoard(unsigned long x) {
	Position b;
	b.mask = 0;
	b.player = x;
	return b;
}

unsigned long power(int k, int p) {
	unsigned long r = 1;
	while (p) {
		r *= k;
		p--;
	}
	return r;
}

void printTable(unsigned long x) {
	int i;
	int j;
	for (j=HEIGHT; j>-1; j--) {
		for (i=0; i<WIDTH; i++) {
			printf("%c",(power(2,j+i*(HEIGHT+1)) & x)?'1':'0');
		}
		printf("\n");
	}
}

void printBit(unsigned long b, int s) {
	int i;
	for (i=s;i>=0;i--){
		printf("%c", (b&power(2,i)?'1':'0'));
	}
	printf("\n");
}

void printBoard(unsigned long A, unsigned long B, char a, char b) {
	int i;
	int j;
	for (j=HEIGHT; j>-1; j--) {
		for (i=0; i<WIDTH; i++) {
			if (power(2,j+i*(HEIGHT+1)) & A) {
				printf("%c", a);
			} else if (power(2,j+i*(HEIGHT+1)) & B) {
				printf("%c", b);
			} else {
				printf("%c", '.');
			}
		}
		printf("\n");
	}
}

unsigned long getCol(unsigned long p, int col) {
	return p & (power(2, (col+1)*(HEIGHT+1)) - power(2, col*(HEIGHT+1)));
}

int movePossible(unsigned long p, int col) {
	return  1 ^ getCol(p, col) >> ((col+1)*(HEIGHT+1)-2);
}

Position  play(Position p, int col) {
	p.mask += 2 * (getCol(p.mask, col) | BOTTOM) + 1;
	return p;
}

int main(int argc, char ** argv) {
    if (argv){
        printf("%s\n", argc[argv-1]);
        // stop warnings on Linux
    }
	Position b =  createBoard(0);

	printf("mask\n");
	printTable(b.mask);
	printf("player\n");
	printTable(b.player);
	printf("Table\n");
	printBoard(b.player, b.mask, 'x', 'o');
	b = play(b, 0);
	printBoard(b.player, b.mask, 'x', 'o');


	return 0;
}
