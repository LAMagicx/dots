#include "ai.h"

int playMove(matrixType ** M, int c, int n) {
	int i;
	for (i=0; i<n;i++) {
		if (M[i][c] != 0)
			break;
	}
	return i-1;
}

int max(int a, int b) {
	if (a < b) {
		return b;
	}else{
		return a;
	}
}

int min(int a, int b) {
	if (a < b) {
		return a;
	}else{
		return b;
	}
}

int minmax(matrixType ** M, int n, int m, int depth, int maxi, int player, int maxDepth, int alpha, int beta) {
	int score;
	int bestScore;
	int won;
	int res;
	int row;
	int j;
	int col_test;

	if (depth == maxDepth) {
		res = 0;
	} else {
		won = checkWin(M, n, m);
		if (won) {
			if (won == player) {
				res = maxDepth - depth / 2;
			} else if (won == player%2+1) {
				res = -1 * (maxDepth - depth / 2);
			} else {
				res = 0;
			}
		} else {
			if (maxi) {
				score = -INF;
				for (j=0;j<m;j++) {
					col_test = m/2 + (1-2*(j%2)) * (j+1) / 2;
					// is col empty ?
					if (M[0][col_test] == 0) {
						row = playMove(M, col_test, n);
						M[row][col_test] = player;
						score = max(score, minmax(M, n, m, depth+1, 0, player, maxDepth, alpha, beta));
						M[row][col_test] = 0;
						if (score >= beta) {
							break;
						}
						alpha = max(score, alpha);
					}
				}
			} else {
				score= INF;
				for (j=0;j<m;j++) {
					col_test = m/2 + (1-2*(j%2)) * (j+1) / 2;
					// is col empty ?
					if (M[0][col_test] == 0) {
						row = playMove(M, col_test, n);
						M[row][col_test] = player%2+1;
						score = min(score, minmax(M, n, m, depth+1, 1, player, maxDepth, alpha, beta));
						M[row][col_test] = 0;
						if (score <= alpha) {
							break;
						}
						beta = min(beta, score);
					}
				}
			}
			res = score;
		}
	}
	return res;
}

int ai(matrixType ** M, int n, int m, int player, int maxDepth) {
	int row;
	int score;
	int bestScore;
	int col;
	int col_test;
	int j;

	bestScore = -INF;

	for (j=0;j<m;j++) {
		// test columns from center out to edges
		col_test = m/2 + (1-2*(j%2)) * (j+1) / 2;
		// is col empty ?
		if (M[0][col_test] == 0) {
			row = playMove(M, col_test, n);
			M[row][col_test] = player;
			score = minmax(M, n, m, 0, 0, player, maxDepth, -INF, INF);
			M[row][col_test] = 0;
			if (score > bestScore) {
				bestScore = score;
				col = col_test;
			}
		}
	}
	return col;
}
