/*Inclusion du fichier .h correspondant*/
#include "demineur.h"


/*! Inclusion des librairies*/
#include <stdio.h>
#include <stdlib.h>
#include <time.h>


caseGrille** allocGrille(int int_tailleLigne, int int_tailleColonne){
    caseGrille** ppcaseGrille_grille;

    ppcaseGrille_grille = malloc(int_tailleLigne*sizeof(caseGrille*));

    if (ppcaseGrille_grille == NULL)
    {
        fprintf(stderr, "erreur \n");
        exit(EXIT_FAILURE);
    }

    for (int i = 0; i < int_tailleLigne; i++)
    {
        ppcaseGrille_grille[i] = malloc(int_tailleColonne*sizeof(caseGrille));

        if (ppcaseGrille_grille[i] == NULL)
        {
            fprintf(stderr, "erreur \n");
            exit(EXIT_FAILURE);
        }
    }

    //ppcaseGrille_grille[1][0].nbrMineVois = 42;
    
    return(ppcaseGrille_grille);
}

caseGrille** initGrille(caseGrille** ppcaseGrille_grille, int int_tailleLigne, int int_tailleColonne, int int_nombreMines){

    for (int i = 0; i < int_tailleLigne; i++)
    {
        for (int j = 0; j < int_tailleColonne; j++)
        {
            ppcaseGrille_grille[i][j].mine = 0;
            ppcaseGrille_grille[i][j].decouvre = 0;
            ppcaseGrille_grille[i][j].drapeau = 0;
            ppcaseGrille_grille[i][j].nbrMineVois = 0;
            ppcaseGrille_grille[i][j].selection = 0;
        }

    }
    
    int int_ligneMine;
    int int_colonneMine;

    int_ligneMine = 0;
    int_colonneMine = 0;

    for (int i = 0; i < int_nombreMines; i++)
    {
        int_ligneMine = rand() % int_tailleLigne;
        int_colonneMine = rand() % int_tailleColonne;
        ppcaseGrille_grille[int_ligneMine][int_colonneMine].mine = 1;

        for (int j = int_ligneMine-1; j < int_ligneMine+2; j++)
        {
            for (int k = int_colonneMine-1; k < int_colonneMine+2; k++)
            {
                ppcaseGrille_grille[j][k].nbrMineVois++;
            }
            
        }
        
    }
    
    return(ppcaseGrille_grille);
}

void affGrille(caseGrille** ppcaseGrille_grille, int int_tailleLigne, int int_tailleColonne){
    int int_c;

    int_c = 0;
    system("clear");
    /*Haut du plateau*/
    printf("┌─");
    for (int k = 0; k < int_tailleColonne-1; k++)
    {
        printf("──┬─");
    }
    printf("──┐\n");
    
    /*Milieu du plateau*/
    for (int i = 0; i < int_tailleLigne; i++)
    {
        /*Affichage de la valeur de la case*/
        for (int j = 0; j < int_tailleColonne+15; j++)
        {
            if (ppcaseGrille_grille[i][j].decouvre == 1)
            {
                printf("│ %d ", ppcaseGrille_grille[i][j].nbrMineVois);
            }

            else if (ppcaseGrille_grille[i][j].drapeau == 1)
            {
                printf("│ ⚐ ");
            }

            else if (ppcaseGrille_grille[i][j].selection == 1)
            {
                printf("││-│");
            }

            else if (ppcaseGrille_grille[i][j].nbrMineVois == 42)
            {
                printf("│ B ");
            }

            else
            {
                if (ppcaseGrille_grille[i][j].mine == 0 )
                {
                    printf("│ 𛲆 ");
                } else if (ppcaseGrille_grille[i][j].mine == 1)
                {
                    printf("│ 𛲆 ");
                }   
            }
        }
        printf("│");

        /*Affichage de l'interligne*/
        if(int_c<int_tailleLigne-1){
            printf("\n├──");
            for (int l = 0; l < int_tailleColonne-1; l++)
            {
                printf("─┼──");
            }
            printf("─┤\n");
            int_c++;
        }
    }

    /*Bas du plateau*/
    printf("\n└──");
    for (int l = 0; l < int_tailleColonne-1; l++)
    {
        printf("─┴──");
    }
    printf("─┘\n");

}

int verifVictoire(caseGrille** ppcaseGrille_grille, int int_tailleLigne, int int_tailleColonne, int int_nombreMines){
    int int_acc;
    int int_fin;
    int_acc = 0;
    int_fin = 0;

    for (int i = 0; i < int_tailleLigne; i++)
    {
        for (int j = 0; j < int_tailleColonne; j++)
        {
            if (ppcaseGrille_grille[i][j].decouvre == 1)
            {
                int_acc = int_acc + 1;
            }
            
        }
        
    }

    if (int_acc == (int_tailleLigne * int_tailleColonne) - int_nombreMines)
    {
        //affGrille(ppcaseGrille_grille, int_tailleLigne, int_tailleColonne);      verif
        printf("win\n");
        int_fin = 1;
    }
    
    return(int_fin);
}

int calculNbrMinesVoisine(caseGrille** ppcaseGrille_grille, int int_tailleLigne, int int_tailleColonne, int int_currentL, int int_currentC){
    int int_acc;
    int_acc = 0;

    if (int_currentL > 0 && int_currentC > 0)
    {
        if (ppcaseGrille_grille[int_currentL-1][int_currentC-1].mine == 1)
        {
            int_acc++;
        }
    }

    if (int_currentL > 0)
    {
        if (ppcaseGrille_grille[int_currentL-1][int_currentC].mine == 1)
        {
            int_acc++;
        }
    }    

    if (int_currentL > 0 && int_currentC < int_tailleColonne-1)
    {
        if (ppcaseGrille_grille[int_currentL-1][int_currentC+1].mine == 1)
        {
            int_acc++;
        }
    }    

    if (int_currentC > 0)
    {
        if (ppcaseGrille_grille[int_currentL][int_currentC-1].mine == 1)
        {
            int_acc++;
        }
    }    

    if (int_currentC < int_tailleColonne-1)
    {
        if (ppcaseGrille_grille[int_currentL][int_currentC+1].mine == 1)
        {
            int_acc++;
        }
    }    

    if (int_currentL < int_tailleLigne-1 && int_currentC > 0)
    {
        if (ppcaseGrille_grille[int_currentL+1][int_currentC-1].mine == 1)
        {
            int_acc++;
        }
    }    

    if (int_currentL < int_tailleLigne-1)
    {
        if (ppcaseGrille_grille[int_currentL+1][int_currentC].mine == 1)
        {
            int_acc++;
        }
    }    

    if (int_currentL < int_tailleLigne-1 && int_currentC < int_tailleColonne-1)
    {
        if (ppcaseGrille_grille[int_currentL+1][int_currentC+1].mine == 1)
        {
            int_acc++;
        }
    }    
    
    return(int_acc);
}

void affMineNulle(caseGrille** ppcaseGrille_grille, int int_tailleLigne, int int_tailleColonne, int int_currentL, int int_currentC){
    printf("cl : %d\ncc : %d \n\n", int_currentL, int_currentC);

    if (int_currentL > 0 && int_currentC > 0)
    {
        if (ppcaseGrille_grille[int_currentL-1][int_currentC-1].mine == 0 && ppcaseGrille_grille[int_currentL-1][int_currentC-1].decouvre == 0)
        {
            ppcaseGrille_grille[int_currentL-1][int_currentC-1].decouvre = 1;
            affMineNulle(ppcaseGrille_grille, int_tailleLigne, int_tailleColonne, int_currentL-1, int_currentC-1);
        }
    }

    if (int_currentL > 0)
    {
        if (ppcaseGrille_grille[int_currentL-1][int_currentC].mine == 0 && ppcaseGrille_grille[int_currentL-1][int_currentC].decouvre == 0)
        {
            ppcaseGrille_grille[int_currentL-1][int_currentC].decouvre = 1;
            affMineNulle(ppcaseGrille_grille, int_tailleLigne, int_tailleColonne, int_currentL-1, int_currentC);
        }
    }

    if (int_currentL > 0 && int_currentC < int_tailleColonne - 1)
    {
        if (ppcaseGrille_grille[int_currentL-1][int_currentC+1].mine == 0 && ppcaseGrille_grille[int_currentL-1][int_currentC+1].decouvre == 0)
        {
            ppcaseGrille_grille[int_currentL-1][int_currentC+1].decouvre = 1;
            affMineNulle(ppcaseGrille_grille, int_tailleLigne, int_tailleColonne, int_currentL-1, int_currentC+1);
        }
    }

    if (int_currentC > 0)
    {
        if (ppcaseGrille_grille[int_currentL][int_currentC-1].mine == 0 && ppcaseGrille_grille[int_currentL][int_currentC-1].decouvre == 0)
        {
            ppcaseGrille_grille[int_currentL][int_currentC-1].decouvre = 1;
            affMineNulle(ppcaseGrille_grille, int_tailleLigne, int_tailleColonne, int_currentL, int_currentC-1);
        }
    }

    if (int_currentC < int_tailleColonne - 1)
    {
        if (ppcaseGrille_grille[int_currentL][int_currentC+1].mine == 0 && ppcaseGrille_grille[int_currentL][int_currentC+1].decouvre == 0)
        {
            ppcaseGrille_grille[int_currentL][int_currentC+1].decouvre = 1;
            affMineNulle(ppcaseGrille_grille, int_tailleLigne, int_tailleColonne, int_currentL, int_currentC+1);
        }
    }

    if (int_currentL < int_tailleLigne-1 && int_currentC > 0)
    {
        if (ppcaseGrille_grille[int_currentL+1][int_currentC-1].mine == 0 && ppcaseGrille_grille[int_currentL+1][int_currentC-1].decouvre == 0)
        {
            ppcaseGrille_grille[int_currentL+1][int_currentC-1].decouvre = 1;
            affMineNulle(ppcaseGrille_grille, int_tailleLigne, int_tailleColonne, int_currentL+1, int_currentC-1);
            affGrille(ppcaseGrille_grille, int_tailleLigne, int_tailleColonne);
        }
    }



}

caseGrille** jeuGrille(caseGrille** ppcaseGrille_grille, int int_tailleLigne, int int_tailleColonne, int int_currentL, int int_currentC, int int_nombreMines){
    
    char char_deplacement;
    int int_fin;
    int int_nbrMineVoisine;

    int_fin = 0;
    int_nbrMineVoisine = 0;

    while (int_fin != 1)
    {
        ppcaseGrille_grille[int_currentL][int_currentC].selection = 1;
        affGrille(ppcaseGrille_grille, int_tailleLigne, int_tailleColonne);
        ppcaseGrille_grille[int_currentL][int_currentC].selection = 0;

        scanf("%c", &char_deplacement);

        if (char_deplacement == 's')
        {
            int_currentL = int_currentL + 1;

            while(int_currentL >= int_tailleLigne)
            {
                int_currentL = int_currentL - 1;
                scanf("%c", &char_deplacement);
            }
            
        }
        else if (char_deplacement == 'z')
        {
            int_currentL = int_currentL - 1;

            while(int_currentL < 0)
            {
                int_currentL = int_currentL + 1;
                scanf("%c", &char_deplacement);
            }

        }
        else if (char_deplacement == 'q')
        {
            int_currentC = int_currentC - 1;

            while(int_currentC < 0)
            {
                int_currentC = int_currentC + 1;
                scanf("%c", &char_deplacement);
            }

        }
        else if (char_deplacement == 'd')
        {
            int_currentC = int_currentC + 1;

            /*while(int_currentC >= int_tailleColonne)
            {
                int_currentC = int_currentC - 1;
                scanf("%c", &char_deplacement);
            }*/
        }

        else if (char_deplacement == 'a' && ppcaseGrille_grille[int_currentL][int_currentC].drapeau == 0)
        {
            ppcaseGrille_grille[int_currentL][int_currentC].drapeau = 1;
        }
        else if (char_deplacement == 'a' && ppcaseGrille_grille[int_currentL][int_currentC].drapeau == 1)
        {
            ppcaseGrille_grille[int_currentL][int_currentC].drapeau = 0;
        }

        else if (char_deplacement == 'e' && ppcaseGrille_grille[int_currentL][int_currentC].decouvre == 0)
        {
            ppcaseGrille_grille[int_currentL][int_currentC].decouvre = 1;
            if (ppcaseGrille_grille[int_currentL][int_currentC].mine == 1)
            {
                printf("loose\n");
                int_fin = 1;
            } else
            {
                //int_nbrMineVoisine = calculNbrMinesVoisine(ppcaseGrille_grille, int_tailleLigne, int_tailleColonne, int_currentL, int_currentC);
                //ppcaseGrille_grille[int_currentL][int_currentC].nbrMineVois = int_nbrMineVoisine;

                if (ppcaseGrille_grille[int_currentL][int_currentC].nbrMineVois == 0)
                {
                    affMineNulle(ppcaseGrille_grille, int_tailleLigne, int_tailleColonne, int_currentL, int_currentC);
                }
                
                


                int_fin = verifVictoire(ppcaseGrille_grille, int_tailleLigne, int_tailleColonne, int_nombreMines);
            }
            
        }

    }
    
    return(ppcaseGrille_grille);
}

void freeGrille(caseGrille** ppcaseGrille_grille, int int_tailleLigne){

    for (int i = 0; i < int_tailleLigne; i++)
    {
        free(ppcaseGrille_grille[i]);
    }

    free(ppcaseGrille_grille);
    
}