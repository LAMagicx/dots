#include "connect.h"

void enterInteger(int * x){
	// EX1
	int out;
	do {
		out = scanf("%d", x);
	}while (out == 0);
}

void enterChar(char * x){
	// EX1
	int out;
	do {
		out = scanf("%c", x);
	}while (out == 0);
}

int play(matrixType ** M, int n, int m, int player) {
	int y;
	do {
		printf("enter the col to play in: \n");	
		enterInteger(&y);
		if (y <= 0 || y > m) {
			printf("col must be between %d and %d\n", 1, m);
			continue;
		}
		if (M[0][y-1] != 0)
			printf("col is full please choose another\n");
	}while ((y <= 0 || y > m) || M[0][y-1] != 0);
	return y-1;
}

int findConnect(matrixType ** M, int n, int m, int i, int j, int a, int b, int player, int count) {
	if (count == 4) {
		return player;
	} else if (i+a >= 0 && i+a < n && j+b >= 0 && j+b < m) {
		if (M[i+a][j+b] == player) {
			return findConnect(M, n, m, i+a, j+b, a, b, player, count+1);
		} else {
			return 0;
		}
	} else {
		return 0;
	}
}

int checkWin(matrixType ** M, int n, int m) {
	int res;
	res = 0;
	int i;
	int j;
	int a;
	int b;
	for (i=0; i<n;i++) {
		for (j=0;j<m;j++) {
			if (M[i][j] != 0) {
				for (a=-1;a<=1;a++) {
					for (b=-1;b<=1;b++) {
						if (i+a >= 0 && i+a < n && j+b >= 0 && j+b < m && (a != 0 || b != 0)) {
							if (M[i+a][j+b] == M[i][j]) {
								res = res | findConnect(M, n, m, i+a, j+b, a, b, M[i][j], 2);
							}
						}
					}
				}
			}
		}
	}
	return res;
}

void displayNumbers(int m) {
	// displays the column numbers
	int i;
	printf("%s", VERT_BORDER);
	printf("%s", SPACE_SEPARATOR);
	for (i=0; i<m; i++) {
		if (i > 0 && i < m) {
			printf("%s", SPACE_SEPARATOR);
			printf("%s", VERT_SEPARATOR);
			printf("%s", SPACE_SEPARATOR);
		}
		printf("%d",i+1);
	}
	printf("%s", SPACE_SEPARATOR);
	printf("%s\n", VERT_BORDER);
}

void displayTop(int m, int l) {
	// displays the top bar
	int i;
	printf("%s", TOP_LEFT_BORDER);
	for (i=0; i<2*m-1+2*m*l; i++) {
		printf("%s", HORI_BORDER);
	}
	printf("%s\n", TOP_RIGHT_BORDER);
}

void displayBottom(int m, int l) {
	// displays the bottom bar
	int i;
	printf("%s", BOTTOM_LEFT_BORDER);
	for (i=0; i<2*m-1+2*m*l; i++) {
		printf("%s", HORI_BORDER);
	}
	printf("%s\n", BOTTOM_RIGHT_BORDER);
}

void displaySeparator(int m, int l) {
	// displays the line separator
	int j;
	printf("%s", VERT_BORDER);	
	for (j=0; j<2*m-1+2*m*l; j++) {
		printf("%s", HORI_SEPARATOR);
	}
	printf("%s\n", VERT_BORDER);	
}

void displayCase(matrixType ** M, int i, int j, int m) {
	// displays the case at i,j
	if (j > 0 && j < m) {
		printf("%s", SPACE_SEPARATOR);
		printf("%s", VERT_SEPARATOR);
		printf("%s", SPACE_SEPARATOR);
	}
	switch ((int)M[i][j]) {
		case 0:
			printf(" ");
			break;
		case 1:
			printf("\033[31m");
			printf("%c", PLAYER_1);
			break;
		case 2:
			printf("\033[33m");
			printf("%c", PLAYER_2);
			break;
		default:
			printf(" ");
			break;
	}
	printf("\033[0m");
}

void displayBoard(matrixType ** M, int n, int m) {
	// displays a terminal board
	int i;
	int j;
	int l;
	l = strlen(SPACE_SEPARATOR);
	//system("clear");
	displayNumbers(m);
	displayTop(m, l);
	for (i=0; i<n; i++) {
		printf("%s", VERT_BORDER);
		printf("%s", SPACE_SEPARATOR);
		for (j=0; j<m; j++) {
			displayCase(M, i, j, m);
		}
		printf("%s", SPACE_SEPARATOR);
		printf("%s\n", VERT_BORDER);
		if (i<n-1)
			displaySeparator(m, l);
	}
	displayBottom(m, l);
}

matrixType ** gravity(matrixType ** M, int n, int m) {
	int i;
	int j;
	int c;

	for (j=m-1; j >= 0; j--) {
		c = 0;
		for (i=n-1; i>=0; i--) {
			if (M[i][j] != 0) {
				M[n-1-c][j] = M[i][j];
				if (n-1-c != i)
					M[i][j] = 0;
				c++;
			}
		}
	}
	return M;
}

matrixType ** rotateRight(matrixType ** M, int * n, int * m) {
	matrixType ** N = createMatix(*m, *n);
	int i;
	int j;
	for (i=0; i<*n; i++) {
		for (j=0; j<*m; j++) {
			//printf("%d %d -> %d %d\n", i, j, *m-(j+1), i);
			N[*m-(j+1)][i] = M[i][j];
		}
	}
	i = *n;
	*n = *m;
	*m = i;
	return N;
}

matrixType ** rotateLeft(matrixType ** M, int * n, int * m) {
	M = rotateRight(M, n, m);
	M = rotateRight(M, n, m);
	M = rotateRight(M, n, m);
	return M;
}


int askRotate() {
	int y;
	do {	
		printf("would you like to rotate ? 1/0 : ");	
		enterInteger(&y);
		printf("%d\n", y);
		if (y != 1 && y != 0) 
			printf("either 1/0\n");
	}while (y != 1 && y != 0);
	return y;
}
