#include "tri.h"

int *init(int taille)
{
    int *tab = malloc(taille * sizeof(int));
    if (tab == NULL)
    {
        printf("Allocation mémoire echoué\n");
        exit(ERREUR_SAISIE);
    }
    return tab;
}

int saisieEntier(void)
{

    int int_retour;
    int nb;

    int_retour = scanf("%d", &nb);

    if (int_retour == 0)
    {
        fprintf(stderr, "Entree incorrecte, Veuillez saisir un entier \n");
        exit(ERREUR_SAISIE);
    }
    return (nb);
}

void aleatoire(int *tab, int taille)
{
    int min;
    int max;

    printf("Entrez les valeurs min et max de votre tableau :\n");
    printf("Min :\n");
    min = saisieEntier();
    printf("Max :\n");
    max = saisieEntier();
    if (taille > 0 && min <= max)
    {
        for (int i = 0; i < taille; i++)
        {
            tab[i] = (rand() % (max - min + 1)) + min; // Valeurs aleatoires entre min et max
        }
    }
    else
    {
        printf("Paramètres non valides\n");
        exit(ERREUR_SAISIE);
    }
}

void afficherTab(int *tab, int taille)
{
    for (int i = 0; i < taille; i++)
    {
        ;
        printf("  %d  ║", tab[i]);
    }
    printf("\n");
}

int *init2(int taille)
{
    int *tab2 = malloc(taille * sizeof(int));
    if (tab2 == NULL)
    {
        printf("Allocation mémoire echoué\n");
        exit(ERREUR_SAISIE);
    }
    return tab2;
}


void copie_tab(int *tab, int *tab2, int taille)
{
    for (int i = 0; i < taille; i++)
    {
        tab2[i] = tab[i];
    }
}

void afficherTab2(int *tab2, int taille)
{
    for (int i = 0; i < taille; i++)
    {
        ;
        printf("  %d  ║", tab2[i]);
    }
    printf("\n");
}


void triInsertion(int *tab, int taille)
{
    int tmp;
    int j;
    for (int i = 0; i < taille; ++i)
    {
        tmp = tab[i];
        for (j = i; j > 0 && tab[j - 1] > tmp; --j)
        {
            tab[j] = tab[j - 1];
        }
        tab[j] = tmp;
    }
}

void fusionner(int *tab, int debut, int milieu, int fin)
{
    int i = 0;
    int max = fin - debut;
    int i_gauche = debut;
    int i_droit = milieu + 1;
    int tabTmp[max];

    while ((i_gauche <= milieu) && (i_droit <= fin))
    {
        if (tab[i_gauche] < tab[i_droit])
        {
            tabTmp[i] = tab[i_gauche];
            i_gauche++;
        }
        else
        {
            tabTmp[i] = tab[i_droit];
            i_droit++;
        }
        i++;
    }

    while (i_gauche <= milieu)
    {
        tabTmp[i] = tab[i_gauche];
        i_gauche++;
        i++;
    }

    while (i_droit <= fin)
    {
        tabTmp[i] = tab[i_droit];
        i_droit++;
        i++;
    }
    for (i = 0; i < max + 1; i++)
    {
        tab[i + debut] = tabTmp[i];
    }
}

void triFusion(int *tab, int debut, int fin)
{
    int milieu;
    if (debut < fin)
    {
        milieu = (debut + fin) / 2;
        triFusion(tab, debut, milieu);
        triFusion(tab, milieu + 1, fin);
        fusionner(tab, debut, milieu, fin);
    }
}

void minMaxTableau(int* tab, int taille, int* min, int* max)
{
    /* Recherche du maximum et du minimum */
    int i;
    for (i = 0; i < taille; i++)
    {
        if (tab[i] > *max)
        {
            *max = tab[i];
        }
        if (tab[i] < *min)
        {
            *min = tab[i];
        }
    }
}

void histogramme(int* tab, int taille, int* histo, int* tailleH, int min, int max){
    int i;
    *tailleH = (max - min +1);
    for (i = 0; i < *tailleH; i++)
    {
        histo[i] = 0;
    }
    for (i = 0; i < *tailleH; i++)
    {
        histo[tab[i]-min] = 0;
    }
}

void triDenombrement(int* tab, int taille){
    int min;
    int max;
    int *histo = malloc(sizeof(int)*taille);
    int tailleH;
    int i;
    int j;
    int k;
    minMaxTableau(tab, taille, &min, &max);
    histogramme(tab, taille, histo, tailleH, min, max);
    for ( i = 0; i < tailleH; i++){
        for ( j = 0; j < histo[i]; j++){
            tab[k++] = i;
        }
    }
    //free(histo);
}
