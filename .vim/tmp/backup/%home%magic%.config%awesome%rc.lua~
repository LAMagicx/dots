-- Awesome Config
--
-- If LuaRocks is installed, make sure that packages installed through it are
-- found (e.g. lgi). If LuaRocks is not installed, do nothing.
-- incmwfact  grow 
--
--
pcall(require, "luarocks.loader")

local gears = require("gears")
local awful = require("awful")
require("awful.autofocus")
local wibox = require("wibox")
local beautiful = require("beautiful")
local naughty = require("naughty")
local menubar = require("menubar")
local hotkeys_popup = require("awful.hotkeys_popup")
require("awful.hotkeys_popup.keys")

-- require("widgets.volume")



-- {{{ Error handling
-- Check if awesome encountered an error during startup and fell back to
-- another config (This code will only ever execute for the fallback config)
if awesome.startup_errors then
    naughty.notify({ preset = naughty.config.presets.critical,
                     title = "Oops, there were errors during startup!",
                     text = awesome.startup_errors })
end

-- Handle runtime errors after startup
do
    local in_error = false
    awesome.connect_signal("debug::error", function (err)
        -- Make sure we don't go into an endless error loop
        if in_error then return end
        in_error = true

        naughty.notify({ preset = naughty.config.presets.critical,
                         title = "Oops, an error happened!",
                         text = tostring(err) })
        in_error = false
    end)
end
-- }}}

-- {{{ Variable definitions
-- Themes define colours, icons, font and wallpapers.
local theme_path = string.format("%s/.config/awesome/themes/%s/theme.lua", os.getenv("HOME"), "awesome-theme")
beautiful.init(theme_path)

floating_terminal = "kitty --class=floating --config /home/magic/.config/kitty/no-opacity.conf"
terminal = "alacritty"
editor = os.getenv("EDITOR") or "vim"
browser = "firefox"
browser2 = "chromium"
browser3 = "qutebrowser"
music = "spotify"
launcher = "rofi -modi combi -show combi"
editor_cmd = terminal .. " -e " .. editor

modkey = "Mod4"
altkey = "Mod1"
shift = "Shift"
ctrl = "Control"


awful.layout.layouts = {
    awful.layout.suit.tile,
    awful.layout.suit.floating,
    awful.layout.suit.max.fullscreen,
    awful.layout.suit.corner.nw,
}
-- }}}

-- {{{ Key bindings
globalkeys = gears.table.join(
    awful.key({ modkey }, "s",     hotkeys_popup.show_help,
            {description="show help", group="awesome"}),
    awful.key({ modkey }, "Left",   awful.tag.viewprev,
            {description = "view previous", group = "tag"}),
    awful.key({ modkey }, "Right",  awful.tag.viewnext,
            {description = "view next", group = "tag"}),
    awful.key({ altkey }, "h",   awful.tag.viewprev,
            {description = "view previous", group = "tag"}),
    awful.key({ altkey }, "l",  awful.tag.viewnext,
            {description = "view next", group = "tag"}),
    awful.key({ altkey, shift }, "h", function ()
                local t = client.focus and client.focus.first_tag or nil
                if t == nil then
                    return
                end
                local tag = client.focus.screen.tags[(t.index - 2) % 5 + 1]
                awful.client.movetotag(tag)
                awful.tag.viewprev()
            end,
            {description = "move client to prev tag", group="client"}),
    awful.key({ altkey, shift }, "l", function ()
                local t = client.focus and client.focus.first_tag or nil
                if t == nil then
                    return
                end
                local tag = client.focus.screen.tags[(t.index % 5) + 1]
                awful.client.movetotag(tag)
                awful.tag.viewnext()
            end,
            {description = "move client to next tag", group = "client"}),
    awful.key({ modkey }, "k", function () awful.client.focus.bydirection("up") end,
            {description = "focus up", group = "client"}),
    awful.key({ modkey }, "j", function () awful.client.focus.bydirection("down") end,
            {description = "focus down", group = "client"}),
    awful.key({ modkey }, "h", function () awful.client.focus.bydirection("left") end,
            {description = "focus left", group = "client"}),
    awful.key({ modkey }, "l", function () awful.client.focus.bydirection("right") end,
            {description = "focus right", group = "client"}),
    awful.key({ modkey }, "Tab", function ()
                -- awful.client.focus.history.previous()
                awful.client.focus.byidx(-1)
                if client.focus then
                    client.focus:raise()
                end
            end,
            {description = "alt-tab functionality", group = "client"}),

    awful.key({ modkey, shift }, "k", function () awful.client.swap.bydirection("up") end,
            {description = "swap up", group = "client"}),
    awful.key({ modkey, shift }, "j", function () awful.client.swap.bydirection("down") end,
            {description = "swap down", group = "client"}),
    awful.key({ modkey, shift }, "h", function () awful.client.swap.bydirection("left") end,
            {description = "swap left", group = "client"}),
    awful.key({ modkey, shift }, "l", function () awful.client.swap.bydirection("right") end,
            {description = "swap right", group = "client"}),

    awful.key({ modkey, "Control" }, "Left", function () awful.screen.focus_relative( 1) end,
            {description = "focus the next screen", group = "screen"}),
    awful.key({ modkey, "Control" }, "Right", function () awful.screen.focus_relative(-1) end,
            {description = "focus the previous screen", group = "screen"}),
    awful.key({ modkey }, "b", function ()
             for s in screen do
                 s.mywibox.visible = not s.mywibox.visible
                 if s.mybottomwibox then
                     s.mybottomwibox.visible = not s.mybottomwibox.visible
                 end
            end
         end,
         {description = "toggle wibox", group = "awesome"}),
    awful.key({ modkey }, "w", function() awful.spawn.with_shell('betterlockscreen -l dim -- --layout-pos="ix-1000:iy+1000"') end,
            {description = "lock screen", group="awesome"}),
    awful.key({ modkey, shift}, "s", function() awful.spawn.with_shell("scrot '%d-%m_capture.png' -sfz -e 'python ~/Pictures/imager.py %d-%m_capture.png'") end,
            {description = "screenshot", group="awesome"}),
    awful.key({ modkey }, "z", function () awful.spawn(terminal) end,
            {description = "open terminal", group="launcher"}),
    awful.key({ modkey , shift }, "z", function () awful.spawn(floating_terminal) end,
            {description = "open terminal", group="launcher"}),
    awful.key({ modkey, "Control" }, "r", awesome.restart,
              {description = "reload awesome", group = "awesome"}),
    awful.key({ modkey, "Shift"   }, "q", awesome.quit,
              {description = "quit awesome", group = "awesome"}),
    awful.key({ modkey,           }, "space", function () awful.layout.inc( 1) end,
              {description = "select next", group = "layout"}),
    awful.key({ modkey, "Shift"   }, "space", function () awful.layout.inc(-1) end,
              {description = "select previous", group = "layout"}),
    awful.key({ modkey, "Control" }, "n",
              function ()
                  local c = awful.client.restore()
                  -- Focus restored client
                  if c then
                    c:emit_signal(
                        "request::activate", "key.unminimize", {raise = true}
                    )
                  end
              end,
              {description = "restore minimized", group = "client"}),
    awful.key({ modkey, "Shift" },"r", function () awful.screen.focused().mypromptbox:run() end,
              {description = "run prompt", group = "launcher"}),
    awful.key({ }, "XF86AudioMute", function() awful.spawn("amixer sset Master toggle") end,
              {description = "mute audio", group = "awesome"}),
    awful.key({ }, "XF86AudioPlay", function() awful.spawn("volpause &") end,
              {description = "toggle audio", group = "awesome"}),
    awful.key({ }, "XF86AudioRaiseVolume", function() awful.spawn("amixer set Master 5%+") end,
              {description = "increase volume", group = "awesome"}),
    awful.key({ }, "XF86AudioLowerVolume", function() awful.spawn("amixer set Master 5%-") end,
              {description = "decrease volume", group = "awesome"}),
    awful.key({ modkey }, "XF86AudioRaiseVolume", function() awful.spawn("playerctl next") end,
              {description = "next track", group = "awesome"}),
    awful.key({ modkey }, "XF86AudioLowerVolume", function() awful.spawn("playerctl previous") end,
              {description = "prev track", group = "awesome"}),
    awful.key({ }, "XF86AudioNext", function() awful.spawn("playerctl next") end,
              {description = "next track", group = "awesome"}),
    awful.key({ }, "XF86AudioPrev", function() awful.spawn("playerctl previous") end,
              {description = "prev tracl", group = "awesome"}),
    awful.key({ }, "XF86MonBrightnessUp", function() awful.spawn("backlight_control +5") end,
              {description = "brightness +5%", group = "awesome"}),
    awful.key({ }, "XF86MonBrightnessDown", function() awful.spawn("backlight_control -5") end,
              {description = "brightness -5%", group = "awesome"}),
    awful.key({ modkey }, "f", function() awful.spawn(browser) end,
              {description = "open browser", group = "launcher"}),
    awful.key({ modkey }, "p", function() awful.spawn(music) end,
              {description = "open spotify", group = "launcher"}),
    awful.key({ modkey }, "d", function() awful.spawn("discord") end,
              {description = "open spotify", group = "launcher"}),
    awful.key({ modkey , "Shift" }, "f", function() awful.spawn(browser2) end,
              {description = "open browser 2", group = "launcher"}),
    awful.key({ modkey }, "q", function() awful.spawn(browser3) end,
              {description = "open qutebrowser", group = "launcher"}),
    awful.key({ modkey }, "r", function()
            awful.spawn.with_shell("rofi -combi-modi window,drun,ssh,filebrowser -show combi -icon-theme 'Tela-circle-blue' -show-icons")
            end,
              {description = "run menu", group = "launcher"}),
    awful.key({ modkey, "Control" }, "Tab", function() awful.spawn.with_shell("rofi -show window") end,
              {description = "run menu", group = "launcher"}),
            awful.key({ modkey, "Control" }, "=", function () awful.tag.incgap (5) end,
			{description = "increase gaps", group = "client"}),
			awful.key({ modkey, "Control" }, "-", function () awful.tag.incgap (-5) end,
			{description = "decrease gaps", group = "client"})
)

clientkeys = gears.table.join(
    awful.key({ modkey,           }, "f",
            function (c)
                c.fullscreen = not c.fullscreen
                c:raise()
            end,
            {description = "toggle fullscreen", group = "client"}),
    awful.key({ modkey }, "x",      function (c) c:kill() end,
            {description = "close", group = "client"}),
    awful.key({ modkey, "Control" }, "space",  awful.client.floating.toggle,
            {description = "toggle floating", group = "client"}),
    awful.key({ modkey,           }, "o",      function (c) c:move_to_screen() end,
            {description = "move to screen", group = "client"}),
    awful.key({ modkey,           }, "t",      function (c) c.ontop = not c.ontop end,
            {description = "toggle keep on top", group = "client"}),
    awful.key({ modkey,           }, "n",
            function (c)
                c.minimized = true
            end ,
            {description = "minimize", group = "client"}),
    awful.key({ modkey,           }, "m",
        function (c)
            c.maximized = not c.maximized
            c:raise()
        end ,
        {description = "(un)maximize", group = "client"}),
    awful.key({ modkey, "Control" }, "m",
        function (c)
            c.maximized_vertical = not c.maximized_vertical
            c:raise()
        end ,
        {description = "(un)maximize vertically", group = "client"}),
    awful.key({ modkey, "Shift"   }, "m",
        function (c)
            c.maximized_horizontal = not c.maximized_horizontal
            c:raise()
        end ,
        {description = "(un)maximize horizontally", group = "client"}),
--    awful.key({ modkey, "Control"    }, "l",function (c) c:relative_move(  0,  0,   -20,   0) end,
--        {description = "Grow Right", group = "window"}),
--    awful.key({ modkey, "Control"    }, "h",function (c) c:relative_move(  0,  0,   20,   0) end,
--        {description = "Grow Left",group = "window"}),
--    awful.key({ modkey, "Control"    }, "j",function (c) c:relative_move(  0,  0,   0,   -20) end,
--        {description = "Grow Down",group = "window"}),
--    awful.key({ modkey, "Control"    },"k",function (c) c:relative_move(  0,  0,   0,   20) end,
--        {description = "Grow Up",group = "window"})
    awful.key({ modkey, "Control"    }, "l",function () awful.tag.incmwfact(0.05) end,
        {description = "Grow Right", group = "window"}),
    awful.key({ modkey, "Control"    }, "h",function () awful.tag.incmwfact(-0.05) end,
        {description = "Grow Left",group = "window"}),
    awful.key({ modkey, "Control"    }, "j",function () awful.client.incwfact(0.05) end,
        {description = "Grow Down",group = "window"}),
    awful.key({ modkey, "Control"    },"k",function () awful.client.incwfact(-0.05) end,
        {description = "Grow Up",group = "window"})
)

-- Bind all key numbers to tags.
-- Be careful: we use keycodes to make it work on any keyboard layout.
-- This should map on the top row of your keyboard, usually 1 to 9.
for i = 1, 9 do
    globalkeys = gears.table.join(globalkeys,
        -- View tag only.
        awful.key({ modkey }, "#" .. i + 9,
                  function ()
                        local screen = awful.screen.focused()
                        local tag = screen.tags[i]
                        if tag then
                           tag:view_only()
                        end
                  end,
                  {description = "view tag #"..i, group = "tag"}),
        -- Toggle tag display.
        awful.key({ modkey, "Control" }, "#" .. i + 9,
                  function ()
                      local screen = awful.screen.focused()
                      local tag = screen.tags[i]
                      if tag then
                         awful.tag.viewtoggle(tag)
                      end
                  end,
                  {description = "toggle tag #" .. i, group = "tag"}),
        -- Move client to tag.
        awful.key({ modkey, "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus then
                          local tag = client.focus.screen.tags[i]
                          if tag then
                              client.focus:move_to_tag(tag)
                          end
                     end
                  end,
                  {description = "move focused client to tag #"..i, group = "tag"})
        --[[
        -- Toggle tag on focused client.
        awful.key({ modkey, "Control", "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus then
                          local tag = client.focus.screen.tags[i]
                          if tag then
                              client.focus:toggle_tag(tag)
                          end
                      end
                  end,
                  {description = "toggle focused client on tag #" .. i, group = "tag"})
        --]]
    )
end

clientbuttons = gears.table.join(
    awful.button({ }, 1, function (c)
        c:emit_signal("request::activate", "mouse_click", {raise = true})
    end),
    awful.button({ modkey }, 1, function (c)
        c:emit_signal("request::activate", "mouse_click", {raise = true})
        awful.mouse.client.move(c)
    end),
    awful.button({ modkey }, 3, function (c)
        c:emit_signal("request::activate", "mouse_click", {raise = true})
        awful.mouse.client.resize(c)
    end)
)

-- Set keys
root.keys(globalkeys)
-- }}}

-- {{{ Rules
-- Rules to apply to new clients (through the "manage" signal).
awful.rules.rules = {
    -- All clients will match this rule.
    { rule = { },
      properties = { border_width = beautiful.border_width,
                     border_color = beautiful.border_normal,
                     focus = awful.client.focus.filter,
                     raise = true,
                     keys = clientkeys,
                     buttons = clientbuttons,
                     screen = awful.screen.preferred,
                     placement = awful.placement.centered+awful.placement.no_overlap+awful.placement.no_offscreen

                     -- placement = awful.placement.no_overlap+awful.placement.no_offscreen
     }
    },

    -- Floating clients.
    { rule_any = {
        instance = {
          "DTA",  -- Firefox addon DownThemAll.
          "copyq",  -- Includes session name in class.
          "pinentry",
          "floating",
          "lxappearance", 
          "nm-connection-editor",
        },
        class = {
            "feh",
            "floating",
            "vlc",
            "Pavucontrol",  
            "Arandr",
            "Blueman-manager",
            "Gpick",
            "Kruler",
            "MessageWin",  -- kalarm.
            "Sxiv",
            "Tor Browser", -- Needs a fixed window size to avoid fingerprinting by screen size.
            "Wpa_gui",
            "veromix",
            "xtightvncviewer"},

        -- Note that the name property shown in xprop might be set slightly after creation of the client
        -- and the name shown there might not match defined rules here.
        name = {
          "Event Tester",  -- xev.
        },
        role = {
          "AlarmWindow",  -- Thunderbird's calendar.
          "ConfigManager",  -- Thunderbird's about:config.
          "pop-up",       -- e.g. Google Chrome's (detached) Developer Tools.
        }
      }, properties = { floating = true }},

    -- Add titlebars to normal clients and dialogs
    { rule_any = {type = { "normal", "dialog" }
      }, properties = { titlebars_enabled = false}
    },

    -- Set Firefox to always map on the tag named "2" on screen 1.
    { rule = { class = "Spotify Premium" },
      properties = { screen = 1, tag = "5" } },
}
-- }}}

-- {{{ Mouse bindings
root.buttons(gears.table.join(
    awful.button({ }, 3, function () mymainmenu:toggle() end),
    awful.button({ }, 4, awful.tag.viewnext),
    awful.button({ }, 5, awful.tag.viewprev)
))
-- }}}

-- {{{ Menu
myawesomemenu = {
   { "hotkeys", function() hotkeys_popup.show_help(nil, awful.screen.focused()) end },
   { "manual", terminal .. " -e man awesome" },
   { "edit config", editor_cmd .. " " .. awesome.conffile },
   { "restart", awesome.restart },
   { "quit", function() awesome.quit() end },
}

mymainmenu = awful.menu({ items = { { "awesome", myawesomemenu, beautiful.awesome_icon },
                                    { "open terminal", terminal },
                                    { "shutdown", function () awful.spawn("shutdown") end}
                                  }
                        })

mylauncher = awful.widget.launcher({ image = beautiful.awesome_icon,
                                     menu = mymainmenu })

-- Menubar configuration
menubar.utils.terminal = terminal -- Set the terminal for applications that require it
--menubar.menu_gen.all_menu_dirs = {"/usr/share/applications/", "~/.local/share/applications/"}

menubar.geometry.x = 193
menubar.geometry.y = 5
menubar.geometry.width = 1395

-- Keyboard map indicator and switcher
mykeyboardlayout = awful.widget.keyboardlayout()
-- }}}

-- {{{ Wibar
-- Create a wibox for each screen and add it
local taglist_buttons = gears.table.join(
                    awful.button({ }, 1, function(t) t:view_only() end),
                    awful.button({ modkey }, 1, function(t)
                                              if client.focus then
                                                  client.focus:move_to_tag(t)
                                              end
                                          end),
                    awful.button({ }, 3, awful.tag.viewtoggle),
                    awful.button({ modkey }, 3, function(t)
                                              if client.focus then
                                                  client.focus:toggle_tag(t)
                                              end
                                          end),
                    awful.button({ }, 4, function(t) awful.tag.viewnext(t.screen) end),
                    awful.button({ }, 5, function(t) awful.tag.viewprev(t.screen) end)
                )

local tasklist_buttons = gears.table.join(
                     awful.button({ }, 1, function (c)
                                              if c == client.focus then
                                                  c.minimized = true
                                              else
                                                  c:emit_signal(
                                                      "request::activate",
                                                      "tasklist",
                                                      {raise = true}
                                                  )
                                              end
                                          end),
                     awful.button({ }, 3, function()
                                              awful.menu.client_list({ theme = { width = 250 } })
                                          end),
                     awful.button({ }, 4, function ()
                                              awful.client.focus.byidx(1)
                                          end),
                     awful.button({ }, 5, function ()
                                              awful.client.focus.byidx(-1)
                                          end))

local function set_wallpaper(s)
    -- Wallpaper
    if beautiful.wallpaper then
        local wallpaper = beautiful.wallpaper
        -- If wallpaper is a function, call it with the screen
        if type(wallpaper) == "function" then
            wallpaper = wallpaper(s)
        end
        gears.wallpaper.maximized(wallpaper, s, true)
    end
end

-- Re-set wallpaper when a screen's geometry changes (e.g. different resolution)
screen.connect_signal("property::geometry", set_wallpaper)
-- Re-set wallpaper when a screen's geometry changes (e.g. different resolution)
screen.connect_signal("property::geometry", set_wallpaper)

function toggle(s)
    s.visible = not s.visible
end

awful.screen.connect_for_each_screen(function(s)
	-- Wallpaper
	set_wallpaper(s)

	-- Each screen has its own tag table.
	awful.tag({"∑", "∆", "∀", "∫", "𝜋" }, s, awful.layout.layouts[1])

	-- Create a promptbox for each screen
	s.mypromptbox = awful.widget.prompt()
	-- Create an imagebox widget which will contain an icon indicating which layout we're using.
	-- We need one layoutbox per screen.
	s.mylayoutbox = awful.widget.layoutbox(s)
	s.mylayoutbox:buttons(gears.table.join(
						   awful.button({ }, 1, function () awful.layout.inc( 1) end),
						   awful.button({ }, 3, function () awful.layout.inc(-1) end),
						   awful.button({ }, 4, function () awful.layout.inc( 1) end),
						   awful.button({ }, 5, function () awful.layout.inc(-1) end)))
	-- Create a taglist widget
	s.mytaglist = awful.widget.taglist {
		screen  = s,
		filter  = awful.widget.taglist.filter.all,
		buttons = taglist_buttons
	}

	-- Create a tasklist widget
	s.mytasklist = awful.widget.tasklist {
		screen  = s,
		filter  = awful.widget.tasklist.filter.currenttags,
		buttons = tasklist_buttons,
        width = s.geometry.width/2
	}
		
	-- Create a systray widget
	s.systray = wibox.widget.systray()
	s.systray.visible = false


	-- Create the wibox

    s.mywibox = awful.wibox({
		ontop = true,
        screen = s ,
        bg="#030303dd",
        visible=false
    }) 

    s.backdrop = awful.wibox({
		 ontop = true,
         visible = true,
         screen = s,
         bg = "#000000",
         type = 'utility',
         x = s.geometry.x,
         y = 25,
         width = s.geometry.width,
         height = 25
    })

    local backdrop_hide_timer = timer({ timeout = 1})
    s.backdrop:geometry({ width = s.workarea.width, height = 1 })
    backdrop_hide_timer:connect_signal("timeout", function() s.mywibox.visible = false; backdrop_hide_timer:stop() end )

    s.backdrop:connect_signal("mouse::enter", function() s.mywibox.visible = true end)
    s.mywibox:connect_signal("mouse::enter", function() if backdrop_hide_timer.started then backdrop_hide_timer:stop() end end)
    s.mywibox:connect_signal("mouse::leave", function() backdrop_hide_timer:again() end)

    

    s.mywibox:setup {
        layout = wibox.layout.align.horizontal,
        { --left widgets
            layout = wibox.layout.align.horizontal,
            mylauncher,
            s.mytaglist,
            s.mypromptbox
        },
        s.mytasklist,
        {--right widgets
            layout = wibox.layout.align.horizontal,
            mykeyboardlayout, 
            wibox.widget.textclock(),
        },
    }
end)



-- }}}

-- {{{ Signals
-- Signal function to execute when a new client appears.
client.connect_signal("manage", function (c)
	-- Set the windows at the slave,
	-- i.e. put it at the end of others instead of setting it master.
	-- if not awesome.startup then awful.client.setslave(c) end

	if awesome.startup
	  and not c.size_hints.user_position
	  and not c.size_hints.program_position then
		-- Prevent clients from being unreachable after screen count changes.
		awful.placement.no_offscreen(c)
	end
    if c.floating then
        c.shape = function(cr, w, h)
            gears.shape.rounded_rect(cr, w, h, 10)
        end
    end
end)

-- Add a titlebar if titlebars_enabled is set to true in the rules.
client.connect_signal("request::titlebars", function(c)
	-- buttons for the titlebar
	local buttons = gears.table.join(
		awful.button({ }, 1, function()
			c:emit_signal("request::activate", "titlebar", {raise = true})
			awful.mouse.client.move(c)
		end),
		awful.button({ }, 3, function()
			c:emit_signal("request::activate", "titlebar", {raise = true})
			awful.mouse.client.resize(c)
		end)
	)

	awful.titlebar(c) : setup {
		{ -- Left
			awful.titlebar.widget.iconwidget(c),
			buttons = buttons,
			layout  = wibox.layout.fixed.horizontal
		},
		{ -- Middle
			{ -- Title
				align  = "center",
				widget = awful.titlebar.widget.titlewidget(c)
			},
			buttons = buttons,
			layout  = wibox.layout.flex.horizontal
		},
		{ -- Right
			awful.titlebar.widget.floatingbutton (c),
			awful.titlebar.widget.maximizedbutton(c),
			awful.titlebar.widget.stickybutton   (c),
			awful.titlebar.widget.ontopbutton    (c),
			awful.titlebar.widget.closebutton    (c),
			layout = wibox.layout.fixed.horizontal()
		},
		layout = wibox.layout.align.horizontal
	}
end)
client.connect_signal("focus", function(c) c.border_color = beautiful.border_focus end)
client.connect_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)
-- }}}

-- {{{ Autostart
autorun = true
autorunApps =
{
   "~/.autostart &",
   "picom",
   "gb"
   
}
if autorun then
   for app = 1, #autorunApps do
       awful.util.spawn_with_shell(autorunApps[app])
   end
end-- }}}

-- " vim:foldmethod=marker:foldlevel=0
