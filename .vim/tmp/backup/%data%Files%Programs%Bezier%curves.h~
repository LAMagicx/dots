#ifndef __CURVES__
#define __CURVES__

#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#include "sdlinc.h"



typedef struct{
    int x;
    int y;
}point;

/*! 
  \fn lerp
  \author Samson Grice <gricemagic@cy-tech.fr>
  \version 0.2
  \date 19-11-21
  \brief DESCRIPTION
  \return type point
  \param P1 of type point
  \param P2 of type point
  \param t of type float
*/
point lerp(point P1, point P2, float t);

/*! 
  \fn draw_line
  \author Samson Grice <gricemagic@cy-tech.fr>
  \version 0.1
  \date 19-11-21
  \brief DESCRIPTION
  \param renderer of type SDL_Renderer *
  \param A of type point
  \param B of type point
*/
void draw_line(SDL_Renderer * renderer, point A, point B);

/*! 
  \fn draw_circle
  \author Samson Grice <gricemagic@cy-tech.fr>
  \version 0.2
  \date 19-11-21
  \brief DESCRIPTION
  \param renderer of type SDL_Renderer *
  \param centreX of type int32_t
  \param centreY of type int32_t
  \param radius of type int32_t
*/
void draw_circle(SDL_Renderer * renderer, int32_t centreX, int32_t centreY, int32_t radius);

/*! 
  \fn draw_points
  \author Samson Grice <gricemagic@cy-tech.fr>
  \version 0.2
  \date 19-11-21
  \brief DESCRIPTION
  \param renderer of type SDL_Renderer *
  \param A of type point
  \param B of type point
  \param C of type point
  \param D of type point
*/
void draw_points(SDL_Renderer * renderer, point A, point B, point C, point D);

/*! 
  \fn draw_curve
  \author Samson Grice <gricemagic@cy-tech.fr>
  \version 0.2
  \date 19-11-21
  \brief DESCRIPTION
  \param renderer of type SDL_Renderer *
  \param A of type point
  \param B of type point
  \param C of type point
  \param D of type point
  \param n of type int
*/
void draw_curve(SDL_Renderer * renderer, point A, point B, point C, point D, int n) ;

/*! 
  \fn cubic_P
  \author Samson Grice <gricemagic@cy-tech.fr>
  \version 0.2
  \date 19-11-21
  \brief DESCRIPTION
  \return type point
  \param A of type point
  \param B of type point
  \param C of type point
  \param D of type point
  \param t of type float
*/
point cubic_P(point A, point B, point C, point D, float t);
/*! 
  \fn cubic_dP
  \author Samson Grice <gricemagic@cy-tech.fr>
  \version 0.2
  \date 19-11-21
  \brief DESCRIPTION
  \return type point
  \param A of type point
  \param B of type point
  \param C of type point
  \param D of type point
  \param t of type float
*/
point cubic_dP(point A, point B, point C, point D, float t);
/*! 
  \fn cubic_ddP
  \author Samson Grice <gricemagic@cy-tech.fr>
  \version 0.2
  \date 19-11-21
  \brief DESCRIPTION
  \return type point
  \param A of type point
  \param B of type point
  \param C of type point
  \param D of type point
  \param t of type float
*/
point cubic_ddP(point A, point B, point C, point D, float t);
/*! 
  \fn normalize
  \author Samson Grice <gricemagic@cy-tech.fr>
  \version 0.2
  \date 19-11-21
  \brief DESCRIPTION
  \param P of type point *
  \param k of type float
*/
void normalize(point * P, float k);
/*! 
  \fn tangent
  \author Samson Grice <gricemagic@cy-tech.fr>
  \version 0.2
  \date 19-11-21
  \brief DESCRIPTION
  \return type point
  \param P of type point
*/
point tangent(point P);
#endif /* ifndef __CURVES__ */
