#include "demineur.h"

void creerPlateau(plateau* plateau_p, int int_h, int int_v, int int_mines)
{
    int i; // variable de boucle
    int j; // variable de boucle
    case_demineur** ttcase_plateau = NULL;

    if (int_mines >= (int_h * int_v)) {
        endwin();
        fprintf(stderr, "Nombre de mines doit être inférieur aux cases disponibles\n");
        exit(ERREUR_MINES);
    }

    ttcase_plateau = (case_demineur**) malloc(int_v * (sizeof(case_demineur*)));
    checkMalloc(ttcase_plateau);

    for (i = 0; i < int_v; i++) {
        ttcase_plateau[i] = (case_demineur*) malloc(int_h * (sizeof(case_demineur)));
        checkMalloc(ttcase_plateau[i]);
        for (j = 0; j < int_h; j++) {
            ttcase_plateau[i][j].type = VIDE;
            ttcase_plateau[i][j].int_mines_voisines = 0;
            ttcase_plateau[i][j].statut_case = CACHEE;
        }
    }

    (*plateau_p).cases_decouvertes = 0;
    (*plateau_p).cases_drapeau = 0;
    (*plateau_p).mines = int_mines;
    (*plateau_p).tab = ttcase_plateau;
    (*plateau_p).impossible = 0;
    (*plateau_p).taille.x = int_v;
    (*plateau_p).taille.y = int_h;
}

void calculerMines(plateau plateau_p)
{
    int i; // variable de boucle
    int j; // variable de boucle
    int k; // variable de boucle
    int l; // variable de boucle

    for (i = 0; i < plateau_p.taille.x; i++) {
        for (j = 0; j < plateau_p.taille.y; j++) {
            if (plateau_p.tab[i][j].type == VIDE) {
                for (k = -1; k < 2; k++) {
                    for (l = -1; l < 2; l++) {
                        if (i + k < plateau_p.taille.x && i + k >= 0 && j + l < plateau_p.taille.y && j + l >= 0) {
                            plateau_p.tab[i][j].int_mines_voisines += (plateau_p.tab[i + k][j + l].type == MINE);
                        }                        
                    }
                }
            }
        }
    }
}

void initialiserPlateau(plateau* plateau_p, xy xy_exception)
{
    int i; // variable de boucle
    xy xy_coords;

    if ((*plateau_p).impossible) {

        (*plateau_p).tab[xy_exception.x][xy_exception.y].type = MINE;

    } else {
        for (i = 0; i < (*plateau_p).mines; i++) {
            do {
                xy_coords.x = (int) rand() % (*plateau_p).taille.x;
                xy_coords.y = (int) rand() % (*plateau_p).taille.y;

            } while ((*plateau_p).tab[xy_coords.x][xy_coords.y].type == MINE || (xy_coords.x == xy_exception.x && xy_coords.y == xy_exception.y));

            (*plateau_p).tab[xy_coords.x][xy_coords.y].type = MINE;
        }
    }
    
    calculerMines((*plateau_p));
}

void afficherPlateau(plateau plateau_p, xy xy_curseur, int int_perdu)
{
    int i; // variable de boucle
    int j; // variable de boucle

    clear();

    // Affichage grille extérieure haut
    printw("%s", GRILLE_H_JOINT_HG);
    for (j = 1; j < plateau_p.taille.y; j++) printw("%s%s%s%s", GRILLE_H_EXT, GRILLE_H_EXT, GRILLE_H_EXT, GRILLE_H_JOINT_H);
    printw("%s%s%s%s\n", GRILLE_H_EXT, GRILLE_H_EXT, GRILLE_H_EXT, GRILLE_H_JOINT_HD);

    for (i = 0; i < plateau_p.taille.x; i++) {
        printw(GRILLE_V_EXT);

        for (j = 0; j < plateau_p.taille.y; j++) {

            // Dessin du curseur si sur la case
            if (xy_curseur.x == i && xy_curseur.y == j) printw(CURSEUR_G);
            else printw(" ");

            // Affichage de la mine si état perdu
            if (int_perdu && plateau_p.tab[i][j].type == MINE) plateau_p.tab[i][j].statut_case = DECOUVERTE;

            // Affichage case
            switch (plateau_p.tab[i][j].statut_case)
            {
                case CACHEE:
                    printw(CASE_CACHEE);
                    break;
                case DRAPEAU:
                    printw(CASE_DRAPEAU);
                    break;
                default:
                    if (plateau_p.tab[i][j].type == MINE) {
                        attron(COLOR_PAIR(8));
                        printw(CASE_MINE);
                        attron(COLOR_PAIR(7));
                    } else {
                        if (plateau_p.tab[i][j].int_mines_voisines) {
                            attron(COLOR_PAIR(plateau_p.tab[i][j].int_mines_voisines));
                            printw("%d", plateau_p.tab[i][j].int_mines_voisines);
                        } else {
                            printw(CASE_ZERO);
                        }
                        attron(COLOR_PAIR(7));

                    }
                    break;
            }

            // Affichage reste curseur si sur la case
            if (xy_curseur.x == i && xy_curseur.y == j) printw(CURSEUR_D);
            else printw(" ");

            // Fermeture grille si dernière case
            if (j == plateau_p.taille.y - 1) printw(GRILLE_V_EXT);
            else printw(GRILLE_V);
        }

        // Affichage grille du bas si dernière rangée, grille du milieu sinon
        if (i == plateau_p.taille.x - 1) {
            printw("\n%s", GRILLE_H_JOINT_BG);
            for (i = 1; i < plateau_p.taille.y; i++) printw("%s%s%s%s", GRILLE_H_EXT, GRILLE_H_EXT, GRILLE_H_EXT, GRILLE_H_JOINT_B);
            printw("%s%s%s%s\n", GRILLE_H_EXT, GRILLE_H_EXT, GRILLE_H_EXT, GRILLE_H_JOINT_BD);
        } else {
            printw("\n%s", GRILLE_V_JOINT_G);
            for (j = 1; j < plateau_p.taille.y; j++) printw("%s%s%s%s", GRILLE_H, GRILLE_H, GRILLE_H, GRILLE_V_JOINT_M);
            printw("%s%s%s%s\n", GRILLE_H, GRILLE_H, GRILLE_H, GRILLE_V_JOINT_D);
        }
    }

    // Affichage statut & touches
    printw("Mines: %d / %d\tCases: %d / %d\n\nDéplacement: %c %c %c %c (ou flèches directionnelles)\nDécouvrir: ENTRÉE\tDrapeau: ESPACE \n", plateau_p.cases_drapeau, plateau_p.mines, plateau_p.cases_decouvertes, plateau_p.taille.x * plateau_p.taille.y, K_HAUT, K_GAUCHE, K_BAS, K_DROITE);
}

int evaluerPlateau(plateau plateau_p)
{
    xy coords;
    coords.x = -1;
    coords.y = -1;
    if (plateau_p.cases_decouvertes == plateau_p.taille.x * plateau_p.taille.y - plateau_p.mines) {
        plateau_p.cases_decouvertes = plateau_p.taille.x * plateau_p.taille.y;
        afficherPlateau(plateau_p, coords, 0);
        attron(COLOR_PAIR(2));
        printw("Vous avez gagné ! Appuyez sur n'importe quelle touche pour quitter\n");
        return 1;
    } else if (plateau_p.cases_decouvertes == -1) {
        afficherPlateau(plateau_p, coords, 1);
        attron(COLOR_PAIR(1));
        printw("BOUM! Appuyez sur n'importe quelle touche pour quitter\n");
        return -1;
    } else {
        return 0;
    }
}

void marquerCase(plateau* plateau_p, xy curseur)
{
    if ((*plateau_p).tab[curseur.x][curseur.y].statut_case != DECOUVERTE) {
        if ((*plateau_p).tab[curseur.x][curseur.y].statut_case == DRAPEAU) {
            (*plateau_p).tab[curseur.x][curseur.y].statut_case = CACHEE;
            (*plateau_p).cases_drapeau--;
        } else {
            if ((*plateau_p).cases_drapeau < (*plateau_p).mines) {
                (*plateau_p).tab[curseur.x][curseur.y].statut_case = DRAPEAU;
                (*plateau_p).cases_drapeau++;
            }
        }
    }
}

void nettoyerVide(plateau* plateau_p, int int_x, int int_y)
{
    int i; // variable de boucle
    int j; // variable de boucle
    if ((*plateau_p).tab[int_x][int_y].type == VIDE && (*plateau_p).tab[int_x][int_y].statut_case != DECOUVERTE) {

        if ((*plateau_p).tab[int_x][int_y].statut_case == DRAPEAU) {
            (*plateau_p).cases_drapeau--;
        }
        
        (*plateau_p).tab[int_x][int_y].statut_case = DECOUVERTE;
        (*plateau_p).cases_decouvertes++;


        if ((*plateau_p).tab[int_x][int_y].int_mines_voisines) return;

        for (i = -1; i < 2; i++) {
            for (j = -1; j < 2; j++) {
                if (i + int_x < (*plateau_p).taille.x && i + int_x >= 0 && j + int_y < (*plateau_p).taille.y && j + int_y >= 0) {
                    nettoyerVide(plateau_p, int_x + i, int_y + j);
                }
            }
        }
        
    }
}

void decouvrirCase(plateau* plateau_p, xy xy_curseur)
{
    if ((*plateau_p).tab[xy_curseur.x][xy_curseur.y].statut_case != DECOUVERTE) {

        if ((*plateau_p).cases_decouvertes == 0) {
            initialiserPlateau(plateau_p, xy_curseur);
        }

        if ((*plateau_p).tab[xy_curseur.x][xy_curseur.y].type == VIDE) {


            if ((*plateau_p).tab[xy_curseur.x][xy_curseur.y].int_mines_voisines) {
                (*plateau_p).tab[xy_curseur.x][xy_curseur.y].statut_case = DECOUVERTE;
                (*plateau_p).cases_decouvertes++;
            } else {
                nettoyerVide(plateau_p, xy_curseur.x, xy_curseur.y);
            }
        } else {
            (*plateau_p).cases_decouvertes = -1;
        }
    }
}

void traitementEntree(plateau* plateau_p, xy* xy_curseur)
{
    int c;
    c = getch();
    switch (c)
    {
    case KEY_UP:
    case K_HAUT:
        if ((*xy_curseur).x > 0) {
            (*xy_curseur).x--;
        }
        break;
    case KEY_DOWN:
    case K_BAS:
        if ((*xy_curseur).x < (*plateau_p).taille.x - 1) {
            (*xy_curseur).x++;
        }
        break;
    case KEY_LEFT:
    case K_GAUCHE:
        if ((*xy_curseur).y > 0) {
            (*xy_curseur).y--;
        }
        break;
    case KEY_RIGHT:
    case K_DROITE:
        if ((*xy_curseur).y < (*plateau_p).taille.y - 1) {
            (*xy_curseur).y++;
        }
        break;
    case K_DRAPEAU:
        marquerCase(plateau_p, *xy_curseur);
        break;
    case K_DECOUVRIR:
        decouvrirCase(plateau_p, *xy_curseur);
        break;
    default:
        break;
    }
}

void selectionDiff(plateau* plateau_p)
{
    int int_saisi;
    int int_h, int_v, int_mines;
    clear();
    attron(A_BOLD);
    printw("DÉMINEUR\n");
    attroff(A_BOLD);
    printw("\nChoisir une difficulté\n1) Facile\n2) Intermédiaire\n3) Difficile\n4) Personnalisé\n\nVotre choix: ");
    int_saisi = saisieEntierPositifCurses();
    switch (int_saisi)
    {
        case 1:
            creerPlateau(plateau_p, DIFF_1_H, DIFF_1_V, DIFF_1_M);
            break;
        case 2:
            creerPlateau(plateau_p, DIFF_2_H, DIFF_2_V, DIFF_2_M);
            break;
        case 3:
            creerPlateau(plateau_p, DIFF_3_H, DIFF_3_V, DIFF_3_M);
            break;
        case 4:
            clear();
            printw("Veuillez choisir la largeur de la grille: ");
            int_h = saisieEntierPositifCurses();
            printw("Veuillez choisir la hauteur de la grille: ");
            int_v = saisieEntierPositifCurses();
            printw("Veuillez choisir un nombre de mines : ");
            int_mines = saisieEntierPositifCurses();

            creerPlateau(plateau_p, int_h, int_v, int_mines);
            break;
        default:
            clear();
            printw("Mode impossible, bonne chance (:\n\nAppuyez sur une touche pour continuer...");
            getch();
            creerPlateau(plateau_p, DIFF_4_H, DIFF_4_V, DIFF_4_M);
            (*plateau_p).impossible = 1;
            break;
    }
	printf("ended selection\n");

}

void nouveauJeu()
{
    plateau plateau_p;
    xy xy_curseur;
    xy_curseur.x = 0;
    xy_curseur.y = 0;


    initscr();
    cbreak();
    keypad(stdscr, TRUE);
    curs_set(0);
    start_color();
    init_pair(1, COLOR_RED, COLOR_BLACK);
    init_pair(2, COLOR_GREEN, COLOR_BLACK);
    init_pair(3, COLOR_YELLOW, COLOR_BLACK);
    init_pair(4, COLOR_BLUE, COLOR_BLACK);
    init_pair(5, COLOR_MAGENTA, COLOR_BLACK);
    init_pair(6, COLOR_CYAN, COLOR_BLACK);
    init_pair(7, COLOR_WHITE, COLOR_BLACK);
    init_pair(8, COLOR_WHITE, COLOR_RED);

    selectionDiff(&plateau_p);

    noecho();
	printf("here\n");
    do {
		clear();
		mvaddstr(0, 0, "here");
        afficherPlateau(plateau_p, xy_curseur, 0);
        traitementEntree(&plateau_p, &xy_curseur);
		refresh();
    } while (evaluerPlateau(plateau_p) == 0);

	printf("not here\n");

    getch();
    endwin();

    for (xy_curseur.x = 0; xy_curseur.x < plateau_p.taille.x; xy_curseur.x++) {
        free(plateau_p.tab[xy_curseur.x]);
    }
    free(plateau_p.tab);
}
