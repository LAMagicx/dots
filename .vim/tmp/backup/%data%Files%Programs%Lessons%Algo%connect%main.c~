#include "sdlinc.h"
#include "connect.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <time.h>

#define DEBUG 1

//Screen dimension constants
const int SCREEN_WIDTH = 875;
const int SCREEN_HEIGHT = 750;
const Uint8 * state;

int init();

//The window we'll be rendering to
SDL_Window* window = NULL;

//The surface contained by the window
SDL_Surface* screen = NULL;

//The renderer to display text
SDL_Renderer * renderer = NULL;

//The matrix that defines the game board
matrixType ** gameBoard = NULL;

// ball struct
typedef struct {
	int x;
	int y;
	float vx;
	float vy;
	float ax;
	float ay;
	int r;
}ball;

ball * balls = NULL;
int ballCount = 0;


// on a board size NxM
int N;
int M;

int init()
{
	//Initialize SDL
	if( SDL_Init( SDL_INIT_VIDEO ) < 0 )
	{
		fprintf(stderr, "SDL could not initialize! SDL_INIT(): %s\n", SDL_GetError() );
		return -1;
	}

	//Initialize SDL_ttf
    if( TTF_Init() == -1 )
    {
        fprintf(stderr, "SDL_ttf could not initialize! SDL_ttf Error: %s\n", TTF_GetError() );
        return -1;
    }

    //Create window
    window = SDL_CreateWindow( "Connect 4", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, SCREEN_WIDTH, SCREEN_HEIGHT, SDL_WINDOW_SHOWN );
    if( window == NULL )
    {
        fprintf(stderr, "Window could not be created! SDL_CreateWindow(): %s\n", SDL_GetError() );
        return -1;
    }

    //Get window surface
    screen = SDL_GetWindowSurface( window );

    renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_PRESENTVSYNC);
    if ( renderer == NULL )
    {
        fprintf(stderr, "Renderer could not be created! SDL_CreateRenderer(): %s\n", SDL_GetError());
    }


	return 0;
}

void initGame(int n, int m) 
{
	// initilises the variables for connect 4
	N = n;
	M = m;
	gameBoard = createMatix(n, m);
	ballCount = 0;
}

void drawCircle(SDL_Renderer * renderer, int32_t centreX, int32_t centreY, int32_t radius)
{
	// draws a circle to the screen
	const int32_t diameter = (radius * 2);

	int32_t x = (radius - 1);
	int32_t y = 0;
	int32_t tx = 1;
	int32_t ty = 1;
	int32_t error = (tx - diameter);

	while (x >= y)
	{
		//  Each of the following renders an octant of the circle
		SDL_RenderDrawPoint(renderer, centreX + x, centreY - y);
		SDL_RenderDrawPoint(renderer, centreX + x, centreY + y);
		SDL_RenderDrawPoint(renderer, centreX - x, centreY - y);
		SDL_RenderDrawPoint(renderer, centreX - x, centreY + y);
		SDL_RenderDrawPoint(renderer, centreX + y, centreY - x);
		SDL_RenderDrawPoint(renderer, centreX + y, centreY + x);
		SDL_RenderDrawPoint(renderer, centreX - y, centreY - x);
		SDL_RenderDrawPoint(renderer, centreX - y, centreY + x);

		if (error <= 0)
		{
			++y;
			error += ty;
			ty += 2;
		}

		if (error > 0)
		{
			--x;
			tx += 2;
			error += (tx - diameter);
		}
	}
}

void drawBoard(matrixType ** board) 
{
	// draw the borad and pieces to the screen
	int grid_width_size = SCREEN_WIDTH / M;
	int grid_height_size = SCREEN_HEIGHT / N;
	//a grid for the board
	SDL_Rect square;
	square.w = grid_width_size;
	square.h = grid_height_size;

	int i;
	int j;
	for (i=0;i<N;i++) {
		for (j=0;j<M;j++){
			square.x = j * grid_width_size;
			square.y = i * grid_height_size;
			SDL_SetRenderDrawColor(renderer, 0,0,0,255);
			SDL_RenderDrawRect(renderer, &square);
			if (board[i][j] == 1) {
				SDL_SetRenderDrawColor(renderer, 255,0,0,255);
				drawCircle(renderer, square.x + grid_width_size / 2, square.y + grid_height_size / 2, grid_width_size / 2);
			} else if (board[i][j] == 2) {
				SDL_SetRenderDrawColor(renderer, 0,255,0,255);
				drawCircle(renderer, square.x + grid_width_size / 2, square.y + grid_height_size / 2, grid_width_size / 2);
			}
		}
	}
} 

void drawBall(SDL_Renderer * renderer, ball b)
{
	// draws a ball to the screen
	drawCircle(renderer, b.x, b.y, b.r);
}

void updateBall(SDL_Renderer * renderer, ball * b)
{
	b->vx += b->ax;
	b->vy += b->ay;
	b->x += b->vx;
	b->y += b->vy;
	b->ax = 0;
	b->ay = 0;
}

void createBall(int x, int y, int r) 
{
	if (balls == NULL) {
		balls = malloc(sizeof(ball) * 1);
	} else {
		balls = realloc(balls, sizeof(ball) * ballCount+1);
	}
	ball b;
	b.x = x;
	b.y = y;
	b.vx = 0.0f;
	b.vy = 0.0f;
	b.ax = 0.0f;
	b.ay = 0.0f;
	b.r = r;

	*(balls+ballCount) = b;

	printf("%d\n", ballCount);

	ballCount++;
}

matrixType ** playMove(matrixType ** board, int x, int y, int player) 
{
	// plays a move based on the mouse click (x,y) and player
	int grid_width_size = SCREEN_WIDTH / M;
	int grid_height_size = SCREEN_HEIGHT / N;
	int col = x / grid_width_size;
	if (DEBUG)
		printf("%d %d = col: %d\n", x, y, col);
	if (DEBUG) printMatrix(board, N, M);
	if (board[0][col] != 0) {
		if (DEBUG)
			printf("col full\n");
		return board;
	} else {
		int i;
		for (i=0; i < N; i++) {
			if (board[i][col] == 0)
				y = i;
		}
		if (DEBUG)
			printf("%d %d = %d\n", y, col, player);
		board[y][col] = player;
		return board;
	}
	createBall(x, y, grid_width_size / 2);
}

int reload_window(int width, int height)
{
	// resizes the window
    SDL_SetWindowSize(window, width, height);

    //Get window surface
    SDL_FreeSurface(screen);

    screen = SDL_GetWindowSurface( window );
    return 1;
}

float dist(int x1, int y1, int x2, int y2)
{
	// distance between points (x1,y1) and (x2, y2)
    return sqrt((x2 - x1)*(x2 - x1) + (y2 - y1)*(y2 - y1));
}

void check_keys(const Uint8 *state)
{
}

int loop()
{
	// main game loop
    SDL_Event event;
    int quit = 0;
    int x,y;
	int player;
	player = rand()%2+1;
	int won;

    while (!quit){
        //SDL_PollEvent( &event );
        SDL_WaitEvent(&event);
        //SDL_Delay(50);

        switch (event.type){
        case SDL_QUIT:
            quit = 1;
            break;
        case SDL_KEYDOWN:
            state = SDL_GetKeyboardState(NULL); 
            check_keys(state);
            break;
        case SDL_MOUSEBUTTONDOWN:
            SDL_GetMouseState(&x, &y);
			gameBoard = playMove(gameBoard,x,y,player);
			player = player % 2 + 1;
            break;
        case SDL_MOUSEMOTION:
            SDL_GetMouseState(&x, &y);
            break;
        case SDL_MOUSEBUTTONUP:
            break;
        default:
            break;
        }
        //Update the surface
        SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255);
        SDL_RenderClear(renderer);
		drawBoard(gameBoard);

		ball * b;
		for (b = balls; b < balls+ballCount; b++) {
			drawBall(renderer, *b);
		}
		won = checkWin(gameBoard, N, M);
		if (won) {
			quit = 1;
		}
        SDL_RenderPresent(renderer);
    }

	//Destroy window
	SDL_DestroyWindow( window );

	//Quit SDL subsystems
	SDL_Quit();

	return 0;
}

int main( int argv, char* argc[] )
{
	// main 
    if (argv){
        printf("%s\n", argc[argv-1]);
        // stop warnings on Linux -Wunused-parameter 
    }
    srand(time(0));
    init();
	initGame(6,7);
    loop();
    return 0;
}

// vim:foldmethod=indent:foldlevel=0:foldnesuisine
