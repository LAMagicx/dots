/*! 
  \file curves.c
  \author Samson Grice <gricemagic@cy-tech.fr>
  \version 0.1
  \date 15-11-21
  \brief DESCRIPTION
  \remarks REMARKS
*/
#include "curves.h"

/*! 
  \fn draw_circle
  \author Samson Grice <gricemagic@cy-tech.fr>
  \version 0.1
  \date 15-11-21
  \brief DESCRIPTION
  \param renderer of type SDL_Renderer *
  \param centreX of type int32_t
  \param centreY of type int32_t
  \param radius of type int32_t
*/
void draw_circle(SDL_Renderer * renderer, int32_t centreX, int32_t centreY, int32_t radius)
{
   const int32_t diameter = (radius * 2);

   int32_t x = (radius - 1);
   int32_t y = 0;
   int32_t tx = 1;
   int32_t ty = 1;
   int32_t error = (tx - diameter);

   while (x >= y)
   {
      //  Each of the following renders an octant of the circle
      SDL_RenderDrawPoint(renderer, centreX + x, centreY - y);
      SDL_RenderDrawPoint(renderer, centreX + x, centreY + y);
      SDL_RenderDrawPoint(renderer, centreX - x, centreY - y);
      SDL_RenderDrawPoint(renderer, centreX - x, centreY + y);
      SDL_RenderDrawPoint(renderer, centreX + y, centreY - x);
      SDL_RenderDrawPoint(renderer, centreX + y, centreY + x);
      SDL_RenderDrawPoint(renderer, centreX - y, centreY - x);
      SDL_RenderDrawPoint(renderer, centreX - y, centreY + x);

      if (error <= 0)
      {
         ++y;
         error += ty;
         ty += 2;
      }

      if (error > 0)
      {
         --x;
         tx += 2;
         error += (tx - diameter);
      }
   }
}

/*! 
  \fn draw_line
  \author Samson Grice <gricemagic@cy-tech.fr>
  \version 0.1
  \date 15-11-21
  \brief DESCRIPTION
  \param renderer of type SDL_Renderer *
  \param A of type point
  \param B of type point
*/
void draw_line(SDL_Renderer * renderer, point A, point B)
{
    SDL_RenderDrawLine(renderer, A.x, A.y, B.x, B.y);
}

/*! 
  \fn draw_points
  \author Samson Grice <gricemagic@cy-tech.fr>
  \version 0.1
  \date 15-11-21
  \brief DESCRIPTION
  \param renderer of type SDL_Renderer *
  \param A of type point
  \param B of type point
  \param C of type point
  \param D of type point
*/
void draw_points(SDL_Renderer * renderer, point A, point B, point C, point D) 
{
    draw_circle(renderer, A.x, A.y, 5);
    draw_circle(renderer, B.x, B.y, 5);
    draw_circle(renderer, C.x, C.y, 5);
    draw_circle(renderer, D.x, D.y, 5);
    draw_line(renderer, A, B);
    draw_line(renderer, B, C);
    draw_line(renderer, C, D);
}

/*! 
  \fn lerp
  \author Samson Grice <gricemagic@cy-tech.fr>
  \version 0.1
  \date 15-11-21
  \brief DESCRIPTION
  \return type point
  \param P1 of type point
  \param P2 of type point
  \param t of type float
*/
point lerp(point P1, point P2, float t)
{
    point P;
    P.x = (1-t) * P1.x + t*P2.x;
    P.y = (1-t) * P1.y + t*P2.y;
    return P;
}

/*! 
  \fn cubic_P
  \author Samson Grice <gricemagic@cy-tech.fr>
  \version 0.1
  \date 15-11-21
  \brief DESCRIPTION
  \return type point
  \param A of type point
  \param B of type point
  \param C of type point
  \param D of type point
  \param t of type float
*/
point cubic_P(point A, point B, point C, point D, float t)
{
    point P;
    P.x = (1-t)*(1-t)*(1-t)*A.x + 3*t*(1-t)*(1-t)*B.x+3*t*t*(1-t)*C.x+t*t*t*D.x;
    P.y = (1-t)*(1-t)*(1-t)*A.y + 3*t*(1-t)*(1-t)*B.y+3*t*t*(1-t)*C.y+t*t*t*D.y;
    return P;
}

/*! 
  \fn cubic_dP
  \author Samson Grice <gricemagic@cy-tech.fr>
  \version 0.1
  \date 15-11-21
  \brief DESCRIPTION
  \return type point
  \param A of type point
  \param B of type point
  \param C of type point
  \param D of type point
  \param t of type float
*/
point cubic_dP(point A, point B, point C, point D, float t)
{
    point P;
    P.x = 3*(1-t)*(1-t)*(B.x-A.x)+6*(1-t)*t*(C.x-B.x)+3*t*t*(D.x-C.x);
    P.y = 3*(1-t)*(1-t)*(B.y-A.y)+6*(1-t)*t*(C.y-B.y)+3*t*t*(D.y-C.y);
    return P;
}

/*! 
  \fn cubic_ddP
  \author Samson Grice <gricemagic@cy-tech.fr>
  \version 0.1
  \date 15-11-21
  \brief DESCRIPTION
  \return type point
  \param A of type point
  \param B of type point
  \param C of type point
  \param D of type point
  \param t of type float
*/
point cubic_ddP(point A, point B, point C, point D, float t)
{
    point P;
    P.x = 6*(1-t)*(C.x-2*B.x+A.x)+6*t*(D.x-2*C.x+B.x);
    P.x = 6*(1-t)*(C.x-2*B.x+A.x)+6*t*(D.x-2*C.x+B.x);
    P.y = 6*(1-t)*(C.y-2*B.y+A.y)+6*t*(D.y-2*C.y+B.y);
    return P;
}

/*! 
  \fn draw_curve
  \author Samson Grice <gricemagic@cy-tech.fr>
  \version 0.1
  \date 15-11-21
  \brief DESCRIPTION
  \param renderer of type SDL_Renderer *
  \param A of type point
  \param B of type point
  \param C of type point
  \param D of type point
  \param n of type int
*/
void draw_curve(SDL_Renderer * renderer, point A, point B, point C, point D, int n) 
{
    point P1,
          P2;

    int i;
    float t,dt;
    dt = 1.0/n;
    for (i=0; i<n; i++){
        t = dt * i;
        P1 = lerp(
                lerp(lerp(A,B,t),lerp(B,C,t),t),
                lerp(lerp(B,C,t), lerp(C,D,t),t),
                t);

        P2 = lerp(
                lerp(lerp(A,B,t+dt),lerp(B,C,t+dt),t+dt),
                lerp(lerp(B,C,t+dt), lerp(C,D,t+dt),t+dt),
                t+dt);
        SDL_RenderDrawLine(renderer, P1.x, P1.y, P2.x, P2.y);
    }

}

/*! 
  \fn normalize
  \author Samson Grice <gricemagic@cy-tech.fr>
  \version 0.1
  \date 15-11-21
  \brief DESCRIPTION
  \param P of type point *
  \param k of type float
*/
void normalize(point * P, float k)
{
    float n = sqrt(P->x*P->x+P->y*P->y);
    P->x = P->x / n * k;
    P->y = P->y / n * k;
}

/*! 
  \fn tangent
  \author Samson Grice <gricemagic@cy-tech.fr>
  \version 0.1
  \date 15-11-21
  \brief DESCRIPTION
  \return type point
  \param P of type point
*/
point tangent(point P)
{
    point Q;
    Q.x = -P.y;
    Q.y = P.x;
    return Q;
}

// vim:foldmethod=indent:foldlevel=0:foldnestmax=1
