# vim:foldmethod=marker:foldlevel=0
global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'
def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'
def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'
endglobal

# {{{ General

snippet template "Basic template" b
---
title: $1
author: Samson
date: `date +'%a %d %b %Y'`
titleblock:
  - \documentclass[a4paper]{article}
header-includes:
  - \usepackage[utf8]{inputenc}
  - \usepackage[T1]{fontenc}
  - \usepackage{textcomp}
  - \usepackage{amsmath, amssymb}
  - \usepackage{import}
  - \usepackage{xifthen}
  - \pdfminorversion=7
  - \usepackage{pdfpages}
  - \usepackage{transparent}
  - \pdfsuppresswarningpagegroup=1
output:
  pdf_document:
    keep_tex: true
---

$0
endsnippet

snippet def. "create definition env" bA
\\begin{def.}{$1}
	$0
\\end{def.}
endsnippet


snippet \ul "underline"
\\underline{$0}
endsnippet

snippet \bt "bold"
\\textbf{$0}
endsnippet

snippet \def "definition" bA
\\fbox{
	\\begin{definition}($1)
		$0
	\\end{definition}
}
endsnippet

snippet \beg "begin" bA
\\begin{$1}
	$0
\\end{$1}
endsnippet

snippet md "math block" bA
$$
$1
$$
$0
endsnippet

snippet mt "inline math" iA
$$1$$0
endsnippet

snippet **** "hrule" bA
\hrule
endsnippet



# }}}

# {{{ Maths

context "math()"
snippet \  "gap"
\\ \\ 
endsnippet

snippet sympy "sympy block " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "evaluate sympy" wr
`!p
from sympy import *
init_printing()
snip.rv = latex(simplify(match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')')), mode='plain').replace("\\left", "").replace("\\right","")
`
endsnippet

context "math()"
snippet \. "dot" iA
\\cdot 
endsnippet

context "math()"
snippet // "Fraction" i
\\frac{$1}{$2}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wr
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wr
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

snippet => "implies" Ai
\implies
endsnippet

snippet =< "implied by" Ai
\impliedby
endsnippet

context "math()"
snippet in "in" A
\in
endsnippet

context "math()"
snippet fa "forall" A
\forall
endsnippet

context "math()"
snippet sr "\sqrt{}" iA
\sqrt{${1:${VISUAL}}}$0
endsnippet

context "math()"
snippet sq "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet td "to the ... power" iA
^{$1}$0
endsnippet

context "math()"
snippet ooo "\infty" A
\infty
endsnippet

priority 10
context "math()"
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet "(\\?\w+)(,\.|\.,)" "Vector postfix" riA
\vec{`!p snip.rv=match.group(1)`}
endsnippet


# }}}

# {{{ Algebra symbols
context "math()"
snippet RR "real" A
\mathbb{R}
endsnippet

context "math()"
snippet FF "curly F"
\mathcal{F}
endsnippet

# }}}

# {{{ Greek sysmbols
snippet \G "Gamma" i
\Gamma
endsnippet

snippet \D "Delta" i
\Delta
endsnippet

#snippet \Z "Zeta"
#\sigma \,\!
#endsnippet

snippet \U "Theta" i
\Theta
endsnippet

snippet \L "Lambda" i
\Lambda
endsnippet

snippet \J "Xi" i
\Xi
endsnippet

snippet \P "Pi" i
\Pi
endsnippet

snippet \S "Sigma" i
\Sigma
endsnippet

snippet \Y "Upsilon" i
\Upsilon
endsnippet

snippet \F "Phi" i
\Phi
endsnippet

snippet \C "Psi" i
\Psi
endsnippet

snippet \V "Omega" i
\Omega
endsnippet

snippet \a "alpha" i
\alpha
endsnippet

snippet \b "beta" i
\beta
endsnippet

snippet \g "gamma" i
\gamma
endsnippet

snippet \d "delta" i
\delta
endsnippet

snippet \e "epsilon" i
\epsilon
endsnippet

snippet \z "zeta" i
\zeta
endsnippet

snippet \h "eta" i
\eta
endsnippet

snippet \u "theta" i
\theta
endsnippet

snippet \i "iota" i
\iota
endsnippet

snippet \k "kappa" i
\kappa
endsnippet

snippet \l "lambda" i
\lambda
endsnippet

snippet \m "mu" i
\mu
endsnippet

snippet \n "nu" i
\nu
endsnippet

snippet \j "xi" i
\xi
endsnippet

snippet \p "pi" i
\pi
endsnippet

snippet \r "rho" i
\rho
endsnippet

snippet \s "sigma" i
\sigma
endsnippet

snippet \t "tau" i
\tau
endsnippet

snippet \y "upsilon" i
\upsilon
endsnippet

snippet \f "phi" i
\phi
endsnippet

snippet \x "chi" i
\chi
endsnippet

snippet \c "psi" i
\psi
endsnippet

snippet \v "omega" i
\omega
endsnippet

snippet \ve "varepsilon" i
\varepsilon
endsnippet

snippet \vf "varphi" i
\varphi
endsnippet

snippet \vp "varpi" i
\varpi
endsnippet

snippet \vr "varrho" i
\varrho
endsnippet

snippet \vs "varsigma" i
\varsigma
endsnippet

snippet \vu "vartheta" i
\vartheta
endsnippet
# }}}

